{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dot-router Dotkernel component to build complex routes, based on mezzio/mezzio-fastroute . dot-router is a wrapper on top of mezzio/mezzio-fastroute Documentation Documentation is available at: https://docs.dotkernel.org/dot-router/. Badges Requirements PHP : 8.1, 8.2, 8.3 or 8.4 laminas/laminas-stratigility : ^3.0 || ^4.0 mezzio/mezzio-fastroute : ^3.12 Setup Run the following command in your application's root directory: composer require dotkernel/dot-router Open your application's config/config.php and the following line: Dot\\Router\\ConfigProvider::class,","title":"Home"},{"location":"#dot-router","text":"Dotkernel component to build complex routes, based on mezzio/mezzio-fastroute . dot-router is a wrapper on top of mezzio/mezzio-fastroute","title":"dot-router"},{"location":"#documentation","text":"Documentation is available at: https://docs.dotkernel.org/dot-router/.","title":"Documentation"},{"location":"#badges","text":"","title":"Badges"},{"location":"#requirements","text":"PHP : 8.1, 8.2, 8.3 or 8.4 laminas/laminas-stratigility : ^3.0 || ^4.0 mezzio/mezzio-fastroute : ^3.12","title":"Requirements"},{"location":"#setup","text":"Run the following command in your application's root directory: composer require dotkernel/dot-router Open your application's config/config.php and the following line: Dot\\Router\\ConfigProvider::class,","title":"Setup"},{"location":"v1/configuration/","text":"Configuration After installation, register dot-router in your project by adding the below line to your configuration aggregator (usually: config/config.php ): Dot\\Router\\ConfigProvider::class,","title":"Configuration"},{"location":"v1/configuration/#configuration","text":"After installation, register dot-router in your project by adding the below line to your configuration aggregator (usually: config/config.php ): Dot\\Router\\ConfigProvider::class,","title":"Configuration"},{"location":"v1/features/","text":"Features Route groups During development, developers often need to create sets of visually similar routes. The traditional way is creating each route, one by one, like in the below example: $app-&gt;post('/product/create', CreateProductHandler::class, 'product:create'); $app-&gt;delete('/product/delete/{id}', DeleteProductHandler::class, 'product:delete'); $app-&gt;patch('/product/update/{id}', UpdateProductHandler::class, 'product:update'); $app-&gt;get('/product/view/{id}', GetProductHandler::class, 'product:view'); Besides the features provided by mezzio/mezzio-fastroute , dot-router offers route groups, which are collections of routes that (partially) share the same path. In order to use this feature, first get an instance of the Dot\\Router\\RouteCollector using the below code: /** @var \\Dot\\Router\\RouteCollectorInterface $routeCollector */ $routeCollector = $container-&gt;get(\\Dot\\Router\\RouteCollectorInterface::class); Then rewrite the above routes using the below code: $routeCollector-&gt;group('/product') -&gt;post('/create', CreateProductHandler::class, 'product:create'); -&gt;delete('/delete/{id}', DeleteProductHandler::class, 'product:delete'); -&gt;patch('/update/{id}', UpdateProductHandler::class, 'product:update'); -&gt;get('/view/{id}', GetProductHandler::class, 'product:view'); Note that /product becomes the group prefix and the routes only specify part that is specific only to them. When dot-router registers the routes, it will automatically prepend the prefix to each route path. Advantages DRY - no need for repeating common route parts encapsulation - similar routes are grouped in a single block of code (vs each route a separate statement) easy path refactoring - modify all routes at once by changing only the prefix easy copying/moving - copying/moving an entire group makes sure that you don't accidentally omit a route Exclude middleware Besides sharing the same path, sometimes routes may need to share handlers/middlewares too. A good example is the usage presence of CheckOwnerMiddleware in the below example: $app-&gt;post('/product/create', CreateProductHandler::class, 'product:create'); $app-&gt;delete('/product/delete/{id}', [CheckOwnerMiddleware::class, DeleteProductHandler::class], 'product:delete'); $app-&gt;patch('/product/update/{id}', [CheckOwnerMiddleware::class, UpdateProductHandler::class], 'product:update'); $app-&gt;get('/product/view/{id}', [CheckOwnerMiddleware::class, GetProductHandler::class], 'product:view'); Just like in the first example, the routes are similar but this time there is CheckOwnerMiddleware , a middleware used by three out of the four routes. For such cases, dot-router provides for specific routes the ability to exclude a middleware from their pipeline. Using this feature, we can rewrite the above example like this: $routeCollector-&gt;group('/product', CheckOwnerMiddleware::class) -&gt;post('/create', CreateProductHandler::class, 'product:create', CheckOwnerMiddleware::class) -&gt;delete('/delete/{id}', DeleteProductHandler::class, 'product:delete') -&gt;patch('/update/{id}', UpdateProductHandler::class, 'product:update') -&gt;get('/view/{id}', GetProductHandler::class, 'product:view'); Note the second argument of the group method is CheckOwnerMiddleware::class . This way all group middlewares will be prepended to the route's handler, so this is the equivalent of using: $app-&gt;post('/product/create', [CheckOwnerMiddleware::class, CreateProductHandler::class], 'product:create') Advantages extends the DRYness of route groups by allowing to specify common middlewares only once per route shorter and easier-to-read route definitions","title":"Features"},{"location":"v1/features/#features","text":"","title":"Features"},{"location":"v1/features/#route-groups","text":"During development, developers often need to create sets of visually similar routes. The traditional way is creating each route, one by one, like in the below example: $app-&gt;post('/product/create', CreateProductHandler::class, 'product:create'); $app-&gt;delete('/product/delete/{id}', DeleteProductHandler::class, 'product:delete'); $app-&gt;patch('/product/update/{id}', UpdateProductHandler::class, 'product:update'); $app-&gt;get('/product/view/{id}', GetProductHandler::class, 'product:view'); Besides the features provided by mezzio/mezzio-fastroute , dot-router offers route groups, which are collections of routes that (partially) share the same path. In order to use this feature, first get an instance of the Dot\\Router\\RouteCollector using the below code: /** @var \\Dot\\Router\\RouteCollectorInterface $routeCollector */ $routeCollector = $container-&gt;get(\\Dot\\Router\\RouteCollectorInterface::class); Then rewrite the above routes using the below code: $routeCollector-&gt;group('/product') -&gt;post('/create', CreateProductHandler::class, 'product:create'); -&gt;delete('/delete/{id}', DeleteProductHandler::class, 'product:delete'); -&gt;patch('/update/{id}', UpdateProductHandler::class, 'product:update'); -&gt;get('/view/{id}', GetProductHandler::class, 'product:view'); Note that /product becomes the group prefix and the routes only specify part that is specific only to them. When dot-router registers the routes, it will automatically prepend the prefix to each route path.","title":"Route groups"},{"location":"v1/features/#exclude-middleware","text":"Besides sharing the same path, sometimes routes may need to share handlers/middlewares too. A good example is the usage presence of CheckOwnerMiddleware in the below example: $app-&gt;post('/product/create', CreateProductHandler::class, 'product:create'); $app-&gt;delete('/product/delete/{id}', [CheckOwnerMiddleware::class, DeleteProductHandler::class], 'product:delete'); $app-&gt;patch('/product/update/{id}', [CheckOwnerMiddleware::class, UpdateProductHandler::class], 'product:update'); $app-&gt;get('/product/view/{id}', [CheckOwnerMiddleware::class, GetProductHandler::class], 'product:view'); Just like in the first example, the routes are similar but this time there is CheckOwnerMiddleware , a middleware used by three out of the four routes. For such cases, dot-router provides for specific routes the ability to exclude a middleware from their pipeline. Using this feature, we can rewrite the above example like this: $routeCollector-&gt;group('/product', CheckOwnerMiddleware::class) -&gt;post('/create', CreateProductHandler::class, 'product:create', CheckOwnerMiddleware::class) -&gt;delete('/delete/{id}', DeleteProductHandler::class, 'product:delete') -&gt;patch('/update/{id}', UpdateProductHandler::class, 'product:update') -&gt;get('/view/{id}', GetProductHandler::class, 'product:view'); Note the second argument of the group method is CheckOwnerMiddleware::class . This way all group middlewares will be prepended to the route's handler, so this is the equivalent of using: $app-&gt;post('/product/create', [CheckOwnerMiddleware::class, CreateProductHandler::class], 'product:create')","title":"Exclude middleware"},{"location":"v1/installation/","text":"Installation Install dotkernel/dot-router by executing the following Composer command: composer require dotkernel/dot-router","title":"Installation"},{"location":"v1/installation/#installation","text":"Install dotkernel/dot-router by executing the following Composer command: composer require dotkernel/dot-router","title":"Installation"},{"location":"v1/overview/","text":"Overview Dotkernel component to build complex routes, based on mezzio/mezzio-fastroute . dot-router is a wrapper on top of mezzio/mezzio-fastroute Badges","title":"Overview"},{"location":"v1/overview/#overview","text":"Dotkernel component to build complex routes, based on mezzio/mezzio-fastroute . dot-router is a wrapper on top of mezzio/mezzio-fastroute","title":"Overview"},{"location":"v1/overview/#badges","text":"","title":"Badges"},{"location":"v1/usage/","text":"Usage Register routes in your application using your preferred method: in config/routes.php per-module, using a RoutesDelegator Both methods will provide access to the application's container via the $container variable. There are two types of routes that you can create: create a single route create a route group","title":"Usage"},{"location":"v1/usage/#usage","text":"Register routes in your application using your preferred method: in config/routes.php per-module, using a RoutesDelegator Both methods will provide access to the application's container via the $container variable. There are two types of routes that you can create: create a single route create a route group","title":"Usage"},{"location":"v1/tutorials/create-route-group/","text":"Creating route groups Following this tutorial assumes that you already completed the installation and configuration steps. Access the RouteCollector Get an instance of the Dot\\Router\\RouteCollector using the below code: /** @var \\Dot\\Router\\RouteCollectorInterface $routeCollector */ $routeCollector = $container-&gt;get(\\Dot\\Router\\RouteCollectorInterface::class); Create route group Create a route group, by setting the route group prefix and optionally a(n array of) common middleware(s): $routeCollector-&gt;group('/resource', SomeMiddleware::class); group method arguments: prefix : required, a string that will be prepended to each route from the group middleware : optional, (array of) request middleware(s) to execute before the route handler(s) Append a route that matches specific request methods $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;route('/manage', ResourceHandler::class, 'route-name', ['GET', 'POST']); If this route does not need to be piped through specific middleware(s), you can specify the fifth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;route('/manage', ResourceHandler::class, 'route-name', ['GET', 'POST'], excludeMiddleware: SomeMiddleware::class); route() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^METHOD1:METHOD2 methods : optional, if omitted, the route will respond to all request methods (equivalent of any() ) excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route Append a route that matches any request method $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;any('/manage', ResourceHandler::class, 'route-name'); If this route does not need to be piped through specific middleware(s), you can specify the fourth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;any('/manage', ResourceHandler::class, 'route-name', excludeMiddleware: SomeMiddleware::class); any() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set to the value of the route path excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route Append a route that matches DELETE requests $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;delete('/{id}', ResourceHandler::class, 'route-name'); If this route does not need to be piped through specific middleware(s), you can specify the fourth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;delete('/{id}', ResourceHandler::class, 'route-name', excludeMiddleware: SomeMiddleware::class); delete() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^DELETE excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route Append a route that matches GET requests $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;get('/{id}', ResourceHandler::class, 'route-name'); If this route does not need to be piped through specific middleware(s), you can specify the fourth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;get('/{id}', ResourceHandler::class, 'route-name', excludeMiddleware: SomeMiddleware::class); get() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^GET excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route Append a route that matches PATCH requests $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;patch('/{id}', ResourceHandler::class, 'route-name'); If this route does not need to be piped through specific middleware(s), you can specify the fourth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;patch('/{id}', ResourceHandler::class, 'route-name', excludeMiddleware: SomeMiddleware::class); patch() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^PATCH excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route Append a route that matches POST requests $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;post('', ResourceHandler::class, 'route-name'); If this route does not need to be piped through specific middleware(s), you can specify the fourth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;post('', ResourceHandler::class, 'route-name', excludeMiddleware: SomeMiddleware::class); post() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^POST excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route Append a route that matches PUT requests $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;put('/{id}', ResourceHandler::class, 'route-name'); If this route does not need to be piped through specific middleware(s), you can specify the fourth argument $excludeMiddleware exclude those middlewares at route level (makes sense when there are multiple routes in a group): $routeCollector-&gt;group('/resource', [SomeMiddleware::class, OtherMiddleware::class]) -&gt;put('/{id}', ResourceHandler::class, 'route-name', excludeMiddleware: SomeMiddleware::class); put() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^PUT excludeMiddleware : optional, (array of) request handler(s)/middleware(s) to exclude for this route","title":"Creating route groups"},{"location":"v1/tutorials/create-route-group/#creating-route-groups","text":"Following this tutorial assumes that you already completed the installation and configuration steps.","title":"Creating route groups"},{"location":"v1/tutorials/create-route-group/#access-the-routecollector","text":"Get an instance of the Dot\\Router\\RouteCollector using the below code: /** @var \\Dot\\Router\\RouteCollectorInterface $routeCollector */ $routeCollector = $container-&gt;get(\\Dot\\Router\\RouteCollectorInterface::class);","title":"Access the RouteCollector"},{"location":"v1/tutorials/create-single-route/","text":"Creating a single route Following this tutorial assumes that you already completed the installation and configuration steps. Access the RouteCollector Get an instance of the Dot\\Router\\RouteCollector using the below code: /** @var \\Dot\\Router\\RouteCollectorInterface $routeCollector */ $routeCollector = $container-&gt;get(\\Dot\\Router\\RouteCollectorInterface::class); Create a route that matches specific request methods $routeCollector-&gt;route('/resource/manage', SomeHandler::class, 'route-name', ['GET', 'POST']); route() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^METHOD1:METHOD2 methods : optional, if omitted, the route will respond to all request methods Create a route that matches any request method $routeCollector-&gt;any('/resource/manage', SomeHandler::class, 'route-name'); any() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set to the value of the route path Create a route that matches DELETE requests $routeCollector-&gt;delete('/resource/{id}', SomeHandler::class, 'route-name'); delete() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^DELETE Create a route that matches GET requests $routeCollector-&gt;get('/resource/{id}', SomeHandler::class, 'route-name'); get() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^GET Create a route that matches PATCH requests $routeCollector-&gt;patch('/resource/{id}', SomeHandler::class, 'route-name'); patch() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^PATCH Create a route that matches POST requests $routeCollector-&gt;post('/resource', SomeHandler::class, 'route-name'); post() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^POST Create a route that matches PUT requests $routeCollector-&gt;put('/resource/{id}', SomeHandler::class, 'route-name'); put() method arguments: path : required, of type string middleware : required, (array of) request handler(s)/middleware(s) name : optional, if omitted, it will be set using the pattern route path ^PUT Chain routes to the RouteCollector In order to facilitate creating routes, each $routeCollector method returns the existing RouteCollector instance, so you can chain routes like this: $routeCollector -&gt;route('/product', SomeHandler::class, 'app::product', ['GET', 'POST']) -&gt;any('/category', SomeHandler::class, 'app::category') -&gt;delete('/order/{id}', SomeHandler::class, 'app::delete-order') -&gt;get('/order/{id}', SomeHandler::class, 'app::view-order') -&gt;patch('/order/{id}', SomeHandler::class, 'app::update-order') -&gt;post('/order', SomeHandler::class, 'app::create-order') -&gt;put('/order/{id}', SomeHandler::class, 'app::replace-order');","title":"Creating a single route"},{"location":"v1/tutorials/create-single-route/#creating-a-single-route","text":"Following this tutorial assumes that you already completed the installation and configuration steps.","title":"Creating a single route"},{"location":"v1/tutorials/create-single-route/#access-the-routecollector","text":"Get an instance of the Dot\\Router\\RouteCollector using the below code: /** @var \\Dot\\Router\\RouteCollectorInterface $routeCollector */ $routeCollector = $container-&gt;get(\\Dot\\Router\\RouteCollectorInterface::class);","title":"Access the RouteCollector"},{"location":"v1/tutorials/create-single-route/#chain-routes-to-the-routecollector","text":"In order to facilitate creating routes, each $routeCollector method returns the existing RouteCollector instance, so you can chain routes like this: $routeCollector -&gt;route('/product', SomeHandler::class, 'app::product', ['GET', 'POST']) -&gt;any('/category', SomeHandler::class, 'app::category') -&gt;delete('/order/{id}', SomeHandler::class, 'app::delete-order') -&gt;get('/order/{id}', SomeHandler::class, 'app::view-order') -&gt;patch('/order/{id}', SomeHandler::class, 'app::update-order') -&gt;post('/order', SomeHandler::class, 'app::create-order') -&gt;put('/order/{id}', SomeHandler::class, 'app::replace-order');","title":"Chain routes to the RouteCollector"}]}